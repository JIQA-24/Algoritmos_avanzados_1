#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

vector<int> PreProcesamiento(string Mcode){
    int l = Mcode.length();

    vector<int> kmp(1,0);
    int pPatron = 0;

    for (int iter = 1; iter < l; iter++){
        if(Mcode[iter] == Mcode[pPatron]){
            pPatron++;
            kmp.push_back(pPatron);
        }else{
            pPatron = 0;
            kmp.push_back(pPatron);
        }
    }

    return kmp;
}
//o(n)
//encontrar el Virus en el string
void KMP(string Transmision, string Mcode, vector<int> kmp){

    int tamanoPatron = Mcode.length();
    int posPatron = 0;

    for (int i = 0; i < Transmision.length(); i++){

        if (Mcode[posPatron] == Transmision[i]){
            posPatron++;
            
            if (posPatron == tamanoPatron){
                int nuevaPosicion = i - (tamanoPatron - 1);
                nuevaPosicion = nuevaPosicion + 1; //Por que es Base 1;
                cout << nuevaPosicion << " ";
                posPatron = kmp[posPatron - 1];
            }
        }else{
            if (posPatron != 0){
                posPatron = kmp[posPatron - 1];
                i--;
            }
        }
    }
    cout << "\n";

}

int main(){
    int Actividades, Secuencia, N;
    string virus, codigo;

    Secuencia = 0;
    Actividades = 0;

    
    ifstream archivo1("transmission1.txt");
    string Transmission1;
    archivo1 >> Transmission1;
    

    ifstream archivo2("transmission2.txt");
    string Transmission2;
    archivo2 >> Transmission2;

    ifstream archivo3("mcode1.txt");
    string Mcode1;
    archivo3 >> Mcode1;

    ifstream archivo4("mcode2.txt");
    string Mcode2;
    archivo4 >> Mcode2;

    ifstream archivo5("mcode3.txt");
    string Mcode3;
    archivo5 >> Mcode3;


    vector<int> preKMP = PreProcesamiento(Mcode3);
    KMP(Transmission1,Mcode3,preKMP); 

}


